Decidable Subtyping of Existential Types for Julia
Belyakova, Julia, et al. “Decidable Subtyping of Existential Types for Julia.” Proceedings of the ACM on Programming Languages, vol. 8, no. PLDI, June 2024, pp. 1091–114. Crossref, https://doi.org/10.1145/3656421.
Julia is a modern scientific-computing language that relies on multiple dispatch to implement generic libraries. While the language does not have a static type system, method declarations are decorated with expressive type annotations to determine when they are applicable. To find applicable methods, the implementation uses subtyping at run-time. We show that Julia's subtyping is undecidable, and we propose a restriction on types to recover decidability by stratifying types into method signatures over value types---where the former can freely use bounded existential types but the latter are restricted to use-site variance. A corpus analysis suggests that nearly all Julia programs written in practice already conform to this restriction.